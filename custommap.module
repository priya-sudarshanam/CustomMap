<?php

/* requiring files which contain dbfunctions and helper functions */
require_once('custommap.dbfunctions.inc');
require_once('custommap.helperfunctions.inc');
ctools_include('ajax');
ctools_include('modal');

/* tips
* print_r formatted version of the array and var_dump but with more detail
*/
/* hook_menu for custommap begins 
************************************************************************************************
*/
/**
 * hook_menu for map
 */	
function custommap_menu(){
	
    $items = array();
    $items['custommap'] = array(
        'title' => 'Map',
        'description' => 'Displays map, enables addition, deletion and updation of locations',
        'page callback' => 'mapShow', 
		'access callback' => TRUE,
		);
	$items['custommap/map']=array(
	    'title' => 'Map Display',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => -10,
    );	
	 $items['custommap/list'] = array (
	   'title' => 'Locations List, Add, Delete & Edit',
	   'type' => MENU_LOCAL_TASK,
	   'weight' => -9,
	   'page callback' => 'create_map_table',
	   'access callback' => TRUE,	
	); 
     
	 $items['custommap/search'] = array (
	   'title' => 'Search for location',
	   'type' => MENU_LOCAL_TASK,
	   'weight' => -8,
	   'page callback' => 'drupal_get_form',
       'page arguments' => array('search_location'),
       'access arguments' => array('access content'),
	   'access callback' => TRUE,		   
	  	); 
	
	 $items['custommap/upload/nojs'] = array (
        'title' => 'Upload File',
        'type' => MENU_CALLBACK,
        'page callback' => 'upload_file',
		'page arguments' => array(2),
	    'access callback' => TRUE,
		'delivery callback' => 'ajax_deliver',
	);
	 
	 $items['custommap/upload/ajax'] = array (
       'delivery callback' => 'ajax_deliver',
	    ) + $items['custommap/upload/nojs']; 

	 $items['custommap/add/nojs'] = array (
	   'type' => MENU_CALLBACK,
	   'tite' => 'Locations',
	   'page callback' => 'add_locations',
	   'page arguments' => array(2),
	   'access callback' => TRUE,
	   'delivery callback' => 'ajax_deliver',
	 );
	   $items['custommap/add/ajax'] = array (
       'delivery callback' => 'ajax_deliver',
	    ) + $items['custommap/add/nojs']; 


	$items['custommap/add_mult/nojs'] = array (
	   'type' => MENU_CALLBACK,
	   'title' => 'Locations',
	   'page callback' => 'add_mult_locations',
	   'page arguments' => array(2),
	   'access callback' => TRUE,
	   'delivery callback' => 'ajax_deliver',
	 );
	   $items['custommap/add_mult/ajax'] = array (
       'delivery callback' => 'ajax_deliver',
	    ) + $items['custommap/add_mult/nojs']; 

		
	 $items['custommap/delete/nojs/%'] = array (
	   'page callback' => 'delete_location',
	   'page arguments' => array(2,3),
	   'access arguments' => array('access location id'),
	   'access callback' => TRUE,
	   'type' => MENU_CALLBACK,
	   'delivery callback' => 'ajax_deliver',
     );
	   $items['custommap/delete/ajax/%'] = array (
       'delivery callback' => 'ajax_deliver',
	    ) + $items['custommap/delete/nojs/%']; 
		
	$items['custommap/delete_all/nojs'] = array (
	   'page callback' => 'delete_all_locations',
	   'page arguments' => array(2,3),
	   'access arguments' => array('access location id'),
	   'access callback' => TRUE,
	   'type' => MENU_CALLBACK,
	   'delivery callback' => 'ajax_deliver',
     );
	   $items['custommap/delete_all/ajax'] = array (
       'delivery callback' => 'ajax_deliver',
	    ) + $items['custommap/delete_all/nojs']; 
   
	 $items['custommap/update/nojs/%'] = array (
	   'type' => MENU_CALLBACK,
	   'page callback' => 'update_location',
	   'page arguments' => array(2,3),
	   'access callback' => TRUE,
	   'access arguments' => array('access location id'),
	   'delivery callback' => 'ajax_deliver',
	 );
	 $items['custommap/update/ajax/%'] = array (
       'delivery callback' => 'ajax_deliver',
	    ) + $items['custommap/update/nojs/%'];  
	return $items;
}

/* custommap hook_menu ends 
************************************************************************************************
*/

 function sorted_location(){
    $locArray = array();
 	$filename = dirname(__FILE__).'/osmap.csv';
	$handle = fopen($filename, "r");
	$contents = fread($handle, filesize($filename));
	fclose($handle);
	$data = explode("\n",($contents));
	foreach($data as $line){
	     array_push($locArray,rtrim($line));		  
	} 
    sort($locArray,SORT_REGULAR);
	return $locArray;
	
	//end($data);
  //  $last_id=key($data);
	//dvm($last_id);
  }

function binaryChecking($addCheck=null){
  $data = sorted_location();
  foreach($data as $line){
       $lines = explode(",",($line));	
	   if ($addCheck === $lines[1]){
	     return $lines[0] ;  
        } 
	} 
  
  return false;  
 }

function search_location($form, &$form_state){
  $form['search'] = array(
      '#type' => 'fieldset', 
	  '#title' => 'Search for Location',
    );
  $form['search']['address'] = array(
    '#type' => 'textfield',
	'#title' => 'Address',
	'#required' => TRUE,
	'#attributes' =>array('placeholder' => t('125 Mount Auburn Street')),
	'#size' => 70,
  ); 
  
   $form['search']['format'] = array(
    '#type' => 'item' ,
	'#title' => 'Expected format',
	'#markup' =>  '<b><font color="red"> 125 Mount Auburn Street</font></b>'
    );
	
   $form['search']['submit'] =array (
           '#type' => 'submit',
	       '#value' => 'SEARCH'
		   );
	       	
   $form['search']['cancel'] = array(
      '#type' => 'button',
      '#value' => 'CANCEL',
      '#validate' => array(),
	     '#attributes' => array(
            'onClick' => 'history.go(-1); return true;'),
		'#post_render' => array('change_button_type'),	
		  
    );  
	if (!empty($form_state['table'])) {
      $form['search']['table'] = $form_state['table'];
    }
	
return $form;
}

function search_location_submit($form, &$form_state){    
    $form_state['table'] = createTable($form_state);
    $form_state['rebuild'] = TRUE;
}

function createTable($form_state){
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_add_js();
  
    $add = $form_state['values']['address'];
    $found = binaryChecking($add);
		
	$output = ''; 
	
	if ($found){
	   $delete_image = drupal_get_path('module', 'custommap') . '/images/th.jpg' ;
	   $update_image = drupal_get_path('module', 'custommap') . '/images/update.jpg' ;
       $header =  
	   $rows[] = array(
			'data' => array(
			$add,
			ctools_modal_image_button($delete_image, 'custommap/delete/nojs/'.$found, '', 'ctools-use-modal'),
			ctools_modal_image_button($update_image, 'custommap/update/nojs/'.$found, '', 'ctools-use-modal'),
				),
			); 
	   $table = array(
	    '#theme' => 'table',
		'#header' => create_table_header(),
		'#rows' => $rows,
		'#empty' => t('No items available'),
		);
	   
	} else {  
       $table = array(
	    '#theme' => 'table',
		'#header' => create_table_header(),
		'#empty' => t('Location not found'),
		);
    
	}
	return $table;

}
/* Upload file functions begins 
************************************************************************************************
*/
/*
* upload_file()
* parameters: form and form_state
* Creates a form for uploading files, validates file extension,
* checks if file is uploaded, if uploaded does the user want to 
* remove it. This is done client-side with js
*/
function upload_file($js = NULL){
   if (!$js) {
    return drupal_get_form('upload_file_form');
  }
    $output = return_modal_form('upload_file');
    print ajax_render($output);
    exit();
   
}

function upload_file_form($form, $form_state){
  return create_upload_file($form, $form_state);
 
}
/*
* upload_file_validate()
* parameters: form and form_state
* uploads the file to the specified directory
* and saves the file values like name, extension etc 
* in the form_state
*/
function upload_file_validate($form, &$form_state){
   try {
         $file = file_save_upload('file', array(
	            'file_validate_extensions' => array('txt'),
				FILE_EXISTS_REPLACE));
	   	
	      if ($file) {
		    if($file = file_move($file, 'public://'.$file->filename.'')){
			    $form_state['upload']['values']['file'] = $file;
			     }
			}
		}
	catch(Exception $e){
		  drupal_set_message(t('Failed to write the file or file was not uploaded. Message = %message, query=%query', 
	       array('%message' =>$e->getMessage(),'%query' => $e->query_string)), 'error');
		   
		   }
}
/*
* upload_file_submit()
* parameters: form and form_state
* reads the data from the file and adds the details to
* the osmap database. If the insert succeeds, the form_state
* is cleared and the information is put in the map.
*/
  function upload_file_submit($form, &$form_state){
    $success = 0;
	$data = array();
	$firstLine = true;
	$mapValue =array();
	try 
	{
		$file = $form_state['upload']['values']['file'];
		$txt_file = file_get_contents('public://'.$file->filename.'');
	    $success  = parse_data($txt_file);
		if ($success){
		    //remove the file from the form_state
			unset($form_state['upload']['values']['file']);
			file_delete($file);
		  }
		foreach(explode("\n", $txt_file) as $line) {
			if($firstLine) { $firstLine = false; continue; } 
				$row = explode(',', $line);
				if ($row[0] !=''){
					$data[] = array('name' => $row[0], 'address' => str_replace('"', '',$row[1].','.$row[2]), 'type' => str_replace('\'','',$row[3])
						);
				}
			}
	
		foreach($data as $row){
			$lat_lng = get_latitude_longitude($row['address']);
			$mapValue = array (
				'name' =>$row['name'],
				'address' => $row['address'],
				'lat' => $lat_lng['lat'],
				'lng' => $lat_lng['lng'],
				'type' => $row['type']);
    
			$success = map_insert_data($mapValue); 
		}
		if ($success){
			unset($form_state['upload']['values']['file']);
			file_delete($file);
			drupal_set_message(t('File data successfully added to the database'));
		}
		
		}
	catch (Exception $e){
	  drupal_set_message(t('Failed to add data to the table. Message = %message, query=%query', 
	       array('%message' =>$e->getMessage(),'%query' => $e->query_string)), 'error');
	 }   
   
  }
/* Upload file functions ends 
************************************************************************************************
*/
/* Add multiple locations begins
************************************************************************************************
*/
function add_mult_locations($js = NULL) {
   
   if (!$js) {
    return drupal_get_form('add_mult_locations_form');
  }
    $output = return_modal_form('add_mult');
    print ajax_render($output);
    exit();
  }
  
 function add_mult_locations_form($form, $form_state) {   
  return create_form($form,$form_state,'add_mult');
}

function add_mult_locations_form_submit($form, &$form_state){
   $location_data = $form_state['values']['data'];
   
   try {
       $success = parse_data($location_data);
        }
   catch(Exception $e){
		  drupal_set_message(t('Failed to write the file or file was not uploaded. Message = %message, query=%query', 
	       array('%message' =>$e->getMessage(),'%query' => $e->query_string)), 'error');
		   
		   }
     
}
/* Add function begins 
************************************************************************************************
*/
/*
* add_locations()
* parameters: js parameter.  
* checks if the form is an ajax form requested. If yes it ajax_renders it
* else it renders a non-ajax form
* Returns: a modal form of add type
*/
function add_locations($js = NULL) {
   if (!$js) {
    return drupal_get_form('add_locations_form');
  }
    $output = return_modal_form('add');
    print ajax_render($output);
    exit();
  }
  
/*
* add_locations_form()
* parameters: form  and form_state  
* get details for the location, like the latitude, longitude etc
* inserts the values for the location in the database
* Returns: success/error message depending on the outcome
*/
function add_locations_form($form, $form_state) {   
//  $form = array();
  return create_form($form,$form_state,'add');
}
/**
 * adds new location details to the table = 'osmap'
 */
function add_locations_form_submit($form, &$form_state){
    $lat_lng = get_latitude_longitude($form_state['values']['address']);
	if (!array_key_exists('error',$lat_lng)){
	    $mapValues =  return_map_values($form_state['values']['address'],$lat_lng['lat'], $lat_lng['lng']);
		try {
		    $returnValue = map_insert_data($mapValues);
			writeToFile($returnValue);
	   	    drupal_set_message(t('Successfully added new location: '.$returnValue['id']));
	     }
		 catch (Exception $e){
                drupal_set_message(t('Insert of location: "'.$form_state['values']['address'].'" failed. Message = %message, query=%query', 
	            array('%message' =>$e->getMessage(),'%query' => $e->query_string)), 'error');
          } 						
									
		} else {
		  drupal_set_message(t('Insert of location failed for address:'.$form_state['values']['address'].'. This is due to quota over limit'), 'error');
		  
		}	
	/* */
 }
function writeToFile($returnValue){
  $filename = dirname(__FILE__).'/osmap.csv';
 // $handle = fopen($filename, "r");
 // $filename = '/osmap.csv';
  $fh = fopen($filename, 'a') or die("can't open file");
  $loc = array (
   $returnValue['id'],$returnValue['address'],$returnValue['lat'],$returnValue['lng']
  );
  $writeLine = implode(",", $loc);
  fwrite($fh, $writeLine);
  fclose($fh);
}
/* Add function ends 
************************************************************************************************
*/
/* Delete function begins
************************************************************************************************
*/
/*
* delete_location()
* parameters: js parameter and location id.  
* checks if the form is an ajax form requested. If yes it ajax_renders it
* else it renders a non-ajax form. It also finds the location name for the 
* location id to confirm the deletion
* Returns: a modal form of delete type
*/
function delete_location($js = NULL, $location_id){
   if(!$js) {
   $form = array();
   return drupal_get_form('delete_location_form');
   } 
   $locationDetails = map_select_data_id($location_id);
   $output = return_modal_form('delete', $locationDetails['address'], $location_id);
   print ajax_render($output);
   exit(); 
  }
  
 /**
 * delete_location_form()
 * arguments: form and form_state
 * Returns: modal delete form
 */
  function delete_location_form($form, $form_state){
    return create_delete_form($form, $form_state, 'delete');
  }
 
 /**
 * delete_location_form_submit
 * arguments: form and form_state
 * Returns: modal delete form
 */
 function delete_location_form_submit($form, $form_state){
     $deletingId = ($form_state['id']);
	 $cleanDeletingId = array('id' => $deletingId);
	 deleteFromFile($deletingId);
	 $success = map_delete_data($cleanDeletingId);	 
 }
  
 function deleteFromFile($deletingId){
  $locArray = sorted_location();
  $loc = array();
  //dvm($locArray);
  foreach($locArray as $line){
    $lines = explode(",",($line));
	   if ($lines[0] !== $deletingId){
	       $loc[] = array (
		   'id' => $lines[0],
		    'address' => $lines[1],
			'lat' => $lines[2],
			'lng' => $lines[3]);
		//   $filename = dirname(__FILE__).'/osmap.csv';
	     } 
	}
	 	
	$fh = fopen(dirname(__FILE__).'/osmap.csv', 'w') or die("can't open file");
	foreach($loc as $line){
	//  dvm($line); }
		$writeLine = implode(",", $line);
		fwrite($fh, $writeLine);
	//	$writeLine = implode("\n", $line);
	    fwrite($fh, "\n"); }
	//  $writeLine = implode(",", array ($line['id'],$line['address'],$line['lat'],$line['lng']));
  //  fwrite($fh, $writeLine);
	
	
    fclose($fh);
}
 
/* Delete function ends
************************************************************************************************
*/
/* Delete All function begins
************************************************************************************************
*/
function delete_all_locations($js = NULL, $location_id){
   if(!$js) {
   $form = array();
   return drupal_get_form('delete_all_locations_form');
   } 
//   $locationDetails = map_select_data_id($location_id);
   $output = return_modal_form('delete_all');
   print ajax_render($output);
   exit(); 
  }
  
 /**
 * creating the modal delete form
 */
  function delete_all_locations_form($form, $form_state){
    return create_delete_form($form, $form_state,'delete_all');
  }
 
 /**
 * submitting the delete location form
 */
 function delete_all_locations_form_submit($form, $form_state){
   
     $success = map_delete_all_data();
 }
  
/* Delete All function ends
************************************************************************************************
/* Update function begins
************************************************************************************************
*/
/**
 * creating the modal update form
 */
function update_location($js = NULL, $location_id){
  if(!$js) {
   $form = array();
   return drupal_get_form('update_location_form');
   }
     
   $form_state = array(
    'ajax' => TRUE,
	'title' => 'Update location',
	'id' => $location_id
   );
   $output = ctools_modal_form_wrapper('update_location_form', $form_state);
   if(!empty($form_state['ajax_commands'])){
     $output = $form_state['ajax_commands'];
   }
   if(!empty($form_state['executed'])){
    ctools_add_js('ajax-responder');
	$output[] = ctools_modal_command_dismiss();
	$output[] = ctools_ajax_command_reload();   
   }
   print ajax_render($output);
   exit();
}

/**
 * creating the update form
 */
function update_location_form($form, $form_state) {   
  $form = array();
  return create_update_form($form, $form_state,'update');
}

/**
 * submitting the update form
 */
function update_location_form_submit($form, &$form_state){
    $updatingId=($form_state['id']);
	$lat_lng = get_latitude_longitude($form_state['values']['address']);
    $mapValues =  return_map_values($form_state['values']['address'],
	                                $lat_lng['lat'], $lat_lng['lng']
									);
   try {
      $count = map_update_data($mapValues, $updatingId);
     // drupal_set_message(t("Updated location @mapValue (@count row updated)", 
	//                     array('@count' => $count, '@mapValue' =>print_r($mapValues['name'], TRUE))));
	  }
   catch (Exception $e)
    {
       drupal_set_message(t('Failed to update location. Message = %message, query=%query', 
	            array('%message' =>$e->getMessage(),'%query' => $e->query_string)), 'error');
      }     
}
 /* Update function ends
************************************************************************************************
*/
/* mapShow function begins
************************************************************************************************
*/
 /**
 * display the map with all the locations present in the table
 * #markup -> displays a google map in the div
 * #js -> attaches two js files, one external and one internal
 * $mapValues are sent via settings feature in drupal 7
 */
function mapShow(){
   // $mapValues = map_select_data();
	$mapValues = sorted_location();
	foreach($mapValues as $line){
	   $data = explode(",",($line));
	   if ($data[0] != ''){
	      $loc[] = array (
		    'id' => $data[0],
			'address' => $data[1],
			'lat' => $data[2],
			'lng' => $data[3]
		  );
	  }
	} 

 try { 
 	$build = array(
	  '#markup' => '           
	                <div id="googleMap" style="width: 100%; height: 1000px;"></div> 
	           
				    
				   ',
	  '#attached' => array (
	     'js' => array (
		    'https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false' => array('type' => 'external',),
			'http://d3js.org/d3.v3.min.js' => array('type' => 'external',),
	        drupal_get_path('module', 'custommap') . '/custommap.js' ,
		    drupal_get_path('module' ,'custommap') . '/markerclusterer.js',
			array(
				'type' => 'setting',
				'data' => array(
					'custommap' => $loc,
					)
				)
			)		
		),
     );  
   } 
  catch (Exception $e)
    {
       drupal_set_message(t('Error in displaying map. Message = %message, query=%query', 
	            array('%message' =>$e->getMessage(),'%query' => $e->query_string)), 'error');
    }	
	return $build;	  
} 


/* mapShow function ends
************************************************************************************************
*/


